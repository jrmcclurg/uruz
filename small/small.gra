// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
   let test_cmp a b = match (a,b) with
     | (x,y) -> x = y
   ;;
}

Program   ->   "mod" <:() @{s^" "}> Integer <:int>
               "begin" <:() @{"\n"^s}>
               Statement* <:(int list) @{List.fold_left (fun res i -> res^"\n"^(string_of_int i)) "" s}>
               "end" <:() @{"\n"^s}> eof
	       { Program(NoPos,$2,List.map (fun i -> i mod $2) $4) } ;

Statement -> Expr <:int> ';' <:()@{}> { $1 } ;

Expr      -> Integer <:int>                         : IntExpr  { $1 }
           | Expr <:int> "+" <:() left> Expr <:int> : PlusExpr { add_ints $1 $3 } ;

Integer -> ('0' | [1-9] [0-9]*) <{int_of_string s}:int> { $1 } ;

SingleComm -> "//" [^\n]* <{}:()> : {};  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <{}:()> : {};  /* throw away recursive multiline comments */

Blanks -> [\r\n\t ]* <{}:()> : {};

/*TestThing -> "one" ;
TestThing2 -> "two" * ;
TestThing3 -> TestThing4 + ;
TestThing4 -> "four" ? ;*/

{
   (* this is the trailer *)
}
