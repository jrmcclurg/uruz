// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
}

Program   ->   { Program(NoPos,'x',None) } 
             | "b" "start"<>@ ({ let p = $1 in print_string p }) Statement? "end"<> eof : Program 21 left { Program(NoPos,$1,None) } ;

Statement -> Expr ';'<> { $1 } ;

Expr      -> Integer         : IntExpr  { $1 }
           | Expr "+"<> 105 Expr : PlusExpr { add_ints $1 $3 } ;

Integer -> "0"  { let x = String.make 1 $1 in (int_of_string x) }  
         | ('0' | [1-9] [0-9]*)<{int_of_string s}:int> 102 unary { $1 } ;
// a subexpression is flat iff it is composed entirely of constants

SingleComm -> ("//" [^\n]*)<> left 100:  {} ;  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <> right 101: {} ;  /* throw away recursive multiline comments */
