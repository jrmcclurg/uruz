// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
   let my_test a = ();;
}

Program   ->   "mod"<{}> @{} Integer<{int}> "begin"<{}> @{ let p = $1 in print_string p }
               Statement* <{int list}> "end"<{}> eof
	       { Program(NoPos,$2,List.map (fun i -> i mod $2) $4) } ;

Statement -> Expr<{int}> ';'<{}> { $1 } ;

Expr      -> Integer<{int}>         : IntExpr  { $1 }
           | Expr<{int}> "+"<{}> left Expr<{int}> : PlusExpr { add_ints $1 $3 } ;

Integer -> ('0' | [1-9] [0-9]*)<{int_of_string s}:{int}> { $1 } ;

SingleComm -> ("//" [^\n]*) <{my_test s}:{}> : ;  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <{}:> : ;  /* throw away recursive multiline comments */
MultiComm2  -> "{" .. "}"  : ;  /* throw away recursive multiline comments */

Blanks -> ((([\r\n\t ])))<{}:> : ;

{
   (* this is the trailer *)
}
