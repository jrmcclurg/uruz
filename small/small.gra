// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
}

Program   ->   "b" "start"< >@ ({ let p = $1 in print_string p }) Statement+ <{(int * int list)}>
               "end"<> eof { Program(NoPos,$1,$3) } ;
// (Statement(NoPos,IntExpr(NoPos,Integer(NoPos,123))),[])

Statement -> Expr<{int}> ';'<> { $1 } ;

Expr      -> Integer<{int}>         : IntExpr  { $1 }
           | Expr<{int}> "+"<> left Expr<{int}> : PlusExpr { add_ints $1 $3 } ;

Integer -> ('0' | [1-9] [0-9]*)<{int_of_string s}:{int}> { $1 } ;
// a subexpression is flat iff it is composed entirely of constants

SingleComm -> ("//" [^\n]*)<{}:> : ;  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <> : ;  /* throw away recursive multiline comments */

Blanks -> ([\r\n\t ])<{}:> : ;

{
   (* this is the trailer *)
}
