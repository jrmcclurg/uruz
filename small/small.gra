// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
   let my_test a = ();;
   let test_cmp a b = match (a,b) with
     | (x,y) -> x = y
   ;;
}

Program   ->   "mod" <:{} @{}> Integer <:{int}> "begin" <:{} @{ let p = s in print_string p }>
               Statement* <:{int list}> "end" <:{}> eof
	       { Program(NoPos,$2,List.map (fun i -> i mod $2) $4) } ;

Statement -> Expr <:{int}> ';' <:{}> { $1 } ;

Expr      -> Integer <:{int}>                                  : IntExpr  { $1 }
           | Expr <:{int} ={(*let f = fun a b -> a = b in f*)}> "+" <:{} left> Expr <:{int}> : PlusExpr { add_ints $1 $3 } ;

Integer -> ('0' | [1-9] [0-9]*) <{int_of_string s}:{int}> { $1 } ;

SingleComm -> ("//" [^\n]*) <{my_test s}:{}> : ;  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <{}:{}> : ;  /* throw away recursive multiline comments */

TestThing -> "one" ;
TestThing2 -> "two" * ;
TestThing3 -> TestThing4 + ;
TestThing4 -> "four" ? <={test_cmp}>;

Blanks -> ((([\r\n\t ]))) <{}:{}> : ;

{
   (* this is the trailer *)
}
