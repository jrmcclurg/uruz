// this is a simple numeric expression langage

parser Program :int =
  | Statement* eof # {
    List.fold_left (fun sum n ->
      match n with
      | ResetStmt(_) -> 0
      | AssignStmt(_,i,n2) -> sum+n2
      | OutputStmt(_) -> Printf.printf "current = %d\n" sum; sum
      | StrStmt(_,s) -> Printf.printf "%s\n" s; sum
    ) 0 $1
  }
;

parser Statement =
  | Ident '=':~ Expr ';':~ # AssignStmt
  | Reset:~ ';':~          # ResetStmt
  | Output:~ ';':~         # OutputStmt
  | Print:~ String ';':~   # StrStmt
;

parser Expr :int =
  | Integer                               # SingletonExpr { $1 }
  | '-'@assoc:="nonassoc"@prec:=90:~ Expr # NegExpr       { (- $2) }
  | Expr '+'@assoc:="left":~ Expr         # PlusExpr      { $1 + $3 }
  | Expr '*'@assoc:="left":~ Expr         # TimesExpr     { $1 * $3 }
  | '(':~ Expr ')':~                      # ParenExpr     { $2 }
;

lexer Integer :int =
  | [0-9]+
;

lexer String :string =
  | '"' [^\"]* '"'
;

keyword Reset = "reset" ;
keyword Print = "print" ;
keyword Output = "output" ;

lexer Ident @map:=true @order:=300 =
  | [a-zA-Z]+
;

// throw away whitespace (while remembering the position info)
lexer Blanks @newline:=true @order:=290 :~ =
  | [\r\n\t ]+
;
