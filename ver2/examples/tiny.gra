/* parser Test =
| "one" : string
| Two : string
| "three" : string
;

parser Two : int =
| 's' #:int
| 't' #:int
;

parser Three: int =
| 's'
| 't'
;

parser Four: int =
| 's':int # :(_ of int)
| 't':int # :(Bar of int)
| 't':int # :(Foo of int)
;

parser Five: (int*char) =
| 's':int 'z' # :(_ of int*char)
| 't':int 'y' # :(Bar of int*char)
| 't':int 'x' # :(Foo of int*char)
;

parser Six :(string*char) =
| 's':int 'z'
| 't':int 'y'
| 't':int 'x'
;

parser Seven = "one" Seven0:(int*int) "three" ;
parser Seven0 = "two" "four" # :(string*string) ;
*/

/*
parser Eight: (int*char) =
| Eight0 # Zap
| 't':int 'y' # :(Bar of int*char)
| 't':int 'x' # :(Foo of int*char)
;
parser Eight0 :(int*char) = 's' 'z' ;*/

/*parser Expr :int =
| Int
| Expr '+' Expr # {$1 + $2}
| '(':~ Expr ')':~                 // TODO XXX - the ')' should become lexer rules
//| "let" Var '=' Expr "in" Expr
;

lexer Int :int = [0-9]+ ;
lexer Var = [a-zA-Z]+ ;*/

/*parser Test :(int*char) =
| 'a':string 'b':string # :(string*string)
//| 'a' 'b'
//| "str":string "str2":string
;*/

/*ast Test =
| ~:string ~:string ~:foobar
| Foo "123":int
| "string" * # :(string list)
| "one" (ast Three = "four") "two"
//| 'a' 'b'
//| "str":string "str2":string
;


parser Foo = "one"@prec:=1 | 'c' | Nothing | MyToken | MyKey ;

ast Nothing :int = ~ ;
ast Noth_ing :int = ~ ;

//parser theAXTest = (parser Inner @two:=123 @three:="abc" = "test")@two:=12345:~ Nothing@prec:=123{n}:~ "one" # :(Foobar of string) | Wow Wow2 Wow3 [123]@prec:=1234 | "one"@prec:=0 Test # Foobar ;

lexer Wow3 @prec:=140 = 'c' 'a' 't' ;
lexer Wow @prec:=13 = 'c' 'a' 't' ;

lexer Wow2 @prec:=14  = 'c' 'a' 't' ;

lexer MyTokens :token = "cat" ;

token MyToken Other :char ;
keyword MyKey = "foobar" ;
parser TheParser = "one" ;

parser Final =
| "one":~ "two":~ "three" # :string
;
*/

/*parser TheTest :(pos_t*string) =
| "one" # :(Foobar of pos_t*string)
| "two" # :(Baz of pos_t*string)
| "three" //"four" //# :(Biff of string*string)
;

parser Final = 
| John Bob # @str{code2}
;

parser John = 
| Ralph @str{code1} 
;

parser Ralph {List.rev x} :(_ list) = 
| ~ # {[]} :(_ list)
| Ralph Frank # {let x = $2 in (x)::$1} :('t2 list)
;

lexer Frank = 
| "one" 
;

lexer Bob = 
| "two" 
;*/

/*ast FooBar =
| ~:string # FooString
| ~:char   # FooChar
| ~:int    # FooInt
;

parser MyParser = "one"* @recur:="right"  ';' "two" "x" FooBar ;
*/

// TODO XXX - the following example should work
/*parser MyOtherParser :int =
| "123":int
| Third
;
lexer Third :int = "12345" ;*/

parser MyOtherParser :int =
| "123":int
| Third 
;
lexer Third :int = "12345" ;

lexer TheTest :~ = "x" ;
lexer TheTest2 @order:=2 :token = "y" ;
lexer TheTest3 @order:=1 = "z" ;

//lexer Recur {the_code} = "{" .. "}" "(" .. ")" ; // TODO XXX flatten!
lexer Recur {the_code} = "(" .. ")" ; // TODO XXX flatten!
lexer Recur2 :~ = "(*" .. "*)" ; // TODO XXX flatten!

parser XIdentO :(int option) =
~ { None }
| '_' @map:=true       { None }
| XIdent:int { Some($1) }
;
//parser XIdent :int = "12334" ;
keyword XIdent @prec:=123 @assoc:="left" = "123xyz" ;

property lexer_code = {this is a test} ;
token MyTok ;

/*parser TheTest2 :string =
| "one" # :string
| "two" # :string
| 'c'
;*/

//parser Two:xOne_t = One ;
//parser One = Two ;

// TODO: fix the "zzz" in code.ml
