/*

* SET(region_id, var_id, time_min, time_max, value)

* INC(region_id, var_id, time_min, time_max, amount)

* DEC(region_id, var_id, time_min, time_max, amount)

* RETR_AVG(region_id, var_id, time_min, time_max)

   Computes the average over time [time_min,time_max] of R.var.

* STORE(trigger_id, len, region_id, var_id, index, value [, time_min, time_max])

   For example, STORE(T0, 5, R2.foobar, 3, 0x123, t1, t2) stores R2.foobar's value 0x123 at time [t1,t2]
   in an array of length 5 and flags it with trigger ID 0. 

* SEND_FIRST_FLAGGED_TO_RHEADS(trigger_id, msg_id, region_id, var_id)

   Sends MSG(var_id,j) to all heads H(R_x) where "j" is the index of the first element in array R.var
   which is flagged with trigger_id.

* CLEAR(trigger_id, region_id, var_id)

   Clears the trigger_id flag on all elements in R.var.

* INVALIDATE_ALL(trigger_id)

   Clears all variables having trigger_id flag set.

* SEND_TO_CHILDREN(msg)

   Sends MSG to all children.  The children will forward it to their children, etc.

* SEND(node_id, msg)

   Sends MSG to a given node.

*/
// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
   let test_cmp a b = match (a,b) with
     | (x,y) -> x = y
   ;;
}

Program -> NodeDecl?   <@{(str_option str_node_decl_t s)^"\n"}>
           EdgeDecl?   <@{(str_option str_edge_decl_t s)^"\n"}>
           Table?      <@{(str_option str_table_t s)^"\n"}>
           RegionDecl* <@{(str_list (fun x -> (str_region_decl_t x)^"\n") s)^"\n"}>
           Trigger* ;

NodeDecl -> "NODES" <@{s^" "}> '{'
            NodeList? <:((node_t list) option)
            @{str_option (fun nl -> let (res,_) = List.fold_left (fun (res,flag) n ->
               (res^(if flag then ", " else "")^(str_node_t n),true)) ("",false) nl in res) s}>
            '}' ;
EdgeDecl -> "EDGES" <@{s^" "}> '{'
            EdgeList? <:(((int*int) list) option)
            @{str_option (fun nl -> let (res,_) = List.fold_left (fun (res,flag) (src,dest) ->
               (res^(if flag then ", " else "")^("\n("^(string_of_int src)^", "^(string_of_int dest)^")"),true)) ("",false) nl in res) s}>
            '}' ;
Table -> "TABLE" <@{s^" "}> '{' NumArrayList? <:(((int list) list) option)
@{str_option (fun ill ->
   let (res,_) = List.fold_left (fun (res,flag) il ->
      (res^(if flag then "," else "")^"\n"^(let (res,_) =
      List.fold_left (fun (res,flag) i -> (res^(if flag then ", " else "")^(string_of_int i),true)) ("",false) il in res)
      ,true)) ("",false) ill in res) s}> '}' ;
RegionDecl -> "REGION" <@{s^" "}> VarOper '=' '{' NumList? <:((int list) option)@{str_option (
fun nl -> let (res,_) = List.fold_left (fun (res,flag) n -> (res^(if flag then ", " else "")^(string_of_int n),true)) ("",false) nl in res
) s}> '}' ;

NumArrayList -> NumArray <:(int list)>                                       { [$1] }
              | NumArrayList <:((int list) list)> ',' NumArray <:(int list)> { $1@[$3] }  ;

NumArray -> '{' NumList <:(int list)> '}' { $2 } ;

NumList -> Integer <:int>             { [$1] }
         | NumList <:(int list)> ',' Integer <:int> { $1@[$3] } ;

NodeList -> Node              { [$1] }
          | NodeList ',' Node { $1@[$3]} ;
EdgeList -> Edge <:(int*int)>              { [$1] }
          | EdgeList <:((int*int) list)> ',' Edge <:(int*int)> { $1@[$3]} ;

Node -> Integer <:int> ':' VarOper ;
Edge -> '(' Integer <:int> ',' Integer <:int> ')' { ($2,$4) } ;

Trigger -> "ON" <:()@{s^" "}> "EVENT" <:()@{s^" "}> Event <@{(str_event_t s)^"\n"}>
           TestList <:(test_t list)@{((str_test_t (List.hd s))^(str_list (fun x -> ";\n"^(str_test_t x)) (List.tl s)))^"\n\n"}>;

TestList -> Test              { [$1] }
          | TestList ';' Test { $1@[$3] } ;

Test -> "IF" <:()@{s^" "}> Condition <@{(str_condition_t s)^" "}> SimpleAction <@{(str_simple_action_t s)^" "}> Else? ;

Else -> "ELSE" <@{"\n"^s^" "}> Action ;

SimpleAction ->                                                                         : EmptyAction 
              | Computation                                                             : CompAction
              | "SET" RegionVar <@{" "^(str_region_var_t s)^" "}> "+=" <@{s^" "}> Var   : IncAction // we might want SET R1.blah = i
              | "SET" RegionVar <@{" "^(str_region_var_t s)^" "}> "-=" <@{s^" "}> Var   : DecAction
              | "SET" RegionVar <@{" "^(str_region_var_t s)^" "}> '=' Var <@{" "^(str_var_t s)}> : SetAction
              | "SELECT" <@{s^" "}> RegionOper                                          : SelectAction
              | '(' ActionList
                <:(simple_action_t list)@{"\n"^(let (res,_) = List.fold_left (
                   fun (res,flag) a -> (res^(if flag then ";\n" else "")^(str_simple_action_t a), true)
                ) ("",false) s in res)^"\n"}>
                ')'                 : SeqAction ;

ActionList -> SimpleAction                { [$1] }
            | ActionList ';' SimpleAction { $1@[$3] } ; // CHANGED THIS FROM Action ';' ActionList

Action -> SimpleAction : NonTestAction
        | Test         : TestAction ;

//From -> 
//      | "FROM" <@{" "^s^" "}> VarOper ;

Computation -> VarOper '(' Params? <:((param_t list) option)@{str_option
      (fun pl -> let (res,_) = List.fold_left (fun (res,flag) p -> (res^(if flag then ", " else "")^(str_param_t p),true)) ("",false) pl in res) s}> ')' ;

Param -> Var          : VarParam
       | VarOper      : OperParam
       | Computation  : CompParam ;

Params -> Param            { [$1] }
        | Params ',' Param { $1@[$3] };

Data -> Value      : ValData
      | RegionOper : RegionData ;

RegionOper -> RegionVar               : VarRegionOper
            | "AVG" '(' RegionVar ')' : AvgRegionOper
            | "MIN" '(' RegionVar ')' : MinRegionOper
            | "MAX" '(' RegionVar ')' : MaxRegionOper ;

Condition -> OrConditions <:((atomic_condition_t list) list)
             @{
                let str_temp = (fun strf sep l ->
                   let (res,_) = List.fold_left (fun (res,flag) acl ->
                      (res^(if flag then sep else "")^(strf acl), true)
                   ) ("",false) l in res
                ) in
                str_temp (str_temp str_atomic_condition_t " && ") " || " s
             }> ;

OrConditions -> AndConditions                    { [$1] }
              | OrConditions "||" AndConditions  { $1@[$3] } ;

AndConditions -> AtomicCondition                    { [$1] }                        
               | AndConditions "&&" AtomicCondition { $1@[$3] } ;

AtomicCondition -> Data                          : DataAtomicCond
                 | '(' VarName "MATCHES" <@{" "^s^" "}> Pattern ')' : MatchAtomicCond
                 | BinCondition                  : BinAtomicCond
                 | '(' Condition ')'             : ParenAtomicCond
                 | '!' AtomicCondition           : NotAtomicCond ;

BinCondition -> Data '<' <@{" "^(String.make 1 s)^" "}> Data  : LTCondition
              | Data '>' <@{" "^(String.make 1 s)^" "}> Data  : GTCondition
              | Data "<=" <@{" "^s^" "}> Data : LTECondition
              | Data ">=" <@{" "^s^" "}> Data : GTECondition
              | Data "==" <@{" "^s^" "}> Data : EqCondition
              | Data "!=" <@{" "^s^" "}> Data : NEqCondition ;

Event -> SimpleEvent : SimpleEvent
       | Condition   : CondEvent ;

SimpleEvent -> Pattern             : PatternSimpleEvent
             | '(' SimpleEvent ')' : ParenSimpleEvent ;

Pattern -> VarOper                   : SimplePattern
         | VarOper '(' Bindings?
            <:((var_t list) option)@{str_option (fun bds -> let (res,_) = List.fold_left (fun (res,flag) v -> (res^(if flag then ", " else "")^(str_var_t v),true)) ("",false) bds in res) s}> ')' : BindPattern ;

Bindings -> Var              { [$1] }
          | Bindings ',' Var { $1@[$3]} ;

Var -> Value   : ValVar
     | VarName : NamedVar ;

Value -> Const <:int>                                                                   : ConstVal
       | "RETR" <:()> '(' VarName ',' VarName ',' VarName ',' Const <:int> ')'                      : RetrVal
       | "RETR_AVG" <:()> '(' VarName ',' VarName',' VarName ',' Const <:int> ',' Const <:int> ')'  : RetrAvgVal
       | "RETR_MIN" <:()> '(' VarName ',' VarName ',' VarName',' Const <:int> ',' Const <:int> ')'  : RetrMinVal
       | "RETR_MAX" <:()> '(' VarName ',' VarName ',' VarName ',' Const <:int> ',' Const <:int> ')' : RetrMaxVal ;

UnsignedInteger -> ("0x" [0-9a-fA-F]+ | '0' | [1-9] [0-9]*) { int_of_string $1 } ;

Integer -> UnsignedInteger <:int>     { $1 }
         | '-' UnsignedInteger <:int> { -$2 } ;

Const -> "TRUE"                      { 1 }
       | "FALSE"                     { 0 }
       | Integer <:int>              { $1 } ;
       //| Integer '.' UnsignedInteger {  } ;

RegionVar -> VarOper '.' TimeVar ;

TimeVar -> VarName                             : NowTimeVar
         | VarName '[' Integer <:int> ']' : InstTimeVar
         | VarName '[' Integer <:int> ',' Integer <:int> ']' : IntervalTimeVar;

VarName -> ([a-z] [a-zA-Z0-9_]*) ;
VarOper -> ([A-Z] [A-Z0-9_]*) ;

SingleComm -> ("--" [^\n]*) <{}:()> : {};  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <{}:()> : {};  /* throw away recursive multiline comments */

Blanks -> [\r\t ]* <{}:()> : {};
Newlines -> '\n' <{do_newline lexbuf}:()> : {};

{
   (* this is the trailer *)
}
