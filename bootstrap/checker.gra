// :set syntax=gra

property libs = "str,unix" ;

parser Model =
  | TheEmpty @str{""} :bool
    ElementSemi* @str{fst (List.fold_left (fun (res,flag) e ->
      (res^(if flag then "\n" else "")^(str_element_t e),true)) ("",false) s)} :(element_t list)
    eof # Model
  | KwGraph :~ OpLsquare GraphElement* :((bool*(int list)) list) OpRsquare eof # Graph {
     Model(NoPos,true,List.fold_left (fun acc x -> match x with
       (_,[]) -> acc
       | (false,l) -> (
         let (id,label) = List.fold_left (fun (acc1,acc2) (name,v) ->
           ((if name="id" then Some(v) else acc1),(if name="label" then Some(v) else acc2))
         ) (None,None) l in
         match (id,label) with
         | (Some(id),Some(label)) ->
           NodeElement(get_current_pos (),
             Node(get_current_pos (),force_add_symbol (str_label label id) (int_of_string id) true,
             [],[],[],[]))::acc
         | _ -> failwith "malformed node")
       | (true,l) -> (
         let (id,source,target) = List.fold_left (fun (acc1,acc2,acc3) (name,v) ->
           ((if name="id" then Some(v) else acc1),(if name="source" then Some(v) else acc2),
           (if name="target" then Some(v) else acc3))
         ) (None,None,None) l in
         match (id,source,target) with
         | (id,Some(src),Some(dst)) ->
           EdgeElement(get_current_pos (),Edge(get_current_pos (),
             (match id with
             | Some(id) -> add_symbol id
             | _ -> get_unique_id ()),Some(int_of_string src),[int_of_string dst],[],1.0)
           )::acc
         | _ -> failwith "malformed node")
       ) [] $3)
    }
;

parser TheEmpty { false } :bool = 
  | ~
;

parser ElementSemi :element_t =
  | Element OptSemi # { $1 }
;
parser OptSemi =
  | ~
  | ';'
;

parser Element =
  | KwSwitch @str{"switch "} :~   Node     # NodeElement
  | KwLink @str{"link "} :~       Edge     # EdgeElement
  | KwSpec @str{"spec "} :~       Exp      # SpecElement
  | KwTraffic @str{"traffic "} :~ Traffic  # TrafficElement
;

parser GraphElement :(bool*(int list)) =
  | GraphField            # { (false,[]) }
  | KwNode :~ GraphBlock # { (false,$2) }
  | KwEdge :~ GraphBlock # { (true,$2) }
;

parser GraphBlock =
  | OpLsquare GraphField* OpRsquare # { $2 }
;

parser GraphField =
  | XIdent GraphValue # { (str_xident_t $1,$2) }
;

parser GraphValue =
  | IntegerVal :int # { string_of_int $1 }
  | FloatVal :float # { string_of_float $1 }
  | String :string  # { $1 }
;

parser Traffic =
  | Names @str{fst (List.fold_left (fun (res,flag) x ->
      (res^(if flag then "" else ", ")^(get_symbol x),false)) ("",true) s)} :(int list)
    ExpListOpt @str{" ["^(fst (List.fold_left (fun (res,flag) p ->
      (res^(if flag then ", " else "")^(str_exp_t p),true)) ("",false) s))^"]"} :(exp_t list)
    FloatValP :float
;

parser Node =
| Name @str{get_symbol s} :int
  Ports @str{" ("^(fst (List.fold_left (fun (res,flag) i ->
    (res^(if flag then ", " else "")^(get_symbol i),true)) ("",false) s))^")"} :(int list)
  ExpListOpt @str{" ["^(fst (List.fold_left (fun (res,flag) p ->
    (res^(if flag then ", " else "")^(str_exp_t p),true)) ("",false) s))^"]"} :(exp_t list) 
  Rules @str{" \123"^(fst (List.fold_left (fun (res,flag) i ->
    (res^(if flag then "" else "")^"\n  rule "^(str_edge_t i),true)) ("",false) s))^"\n\125"} :(edge_t list)
  FinalRules @str{" final \123"^(fst (List.fold_left (fun (res,flag) i ->
    (res^(if flag then "" else "")^"\n  rule "^(str_edge_t i),true)) ("",false) s))^"\n\125"} :(edge_t list)
  # Node
;

parser Edge =
| UniqueId @str{""} :int
  Name? @str{(match s with None -> "" | Some(s) -> get_symbol s)} :(int option)
  "=>" @str{" => "} :~
  NamesOpt @str{fst (List.fold_left (fun (res,flag) x ->
  (res^(if flag then "" else ", ")^(get_symbol x),false)) ("",true) s)} :(int list)
  ExpList @str{" ["^(fst (List.fold_left (fun (res,flag) p ->
    (res^(if flag then ", " else "")^(str_exp_t p),true)) ("",false) s))^"]"} :(exp_t list)
  FloatValP :float
  # Edge
;

parser UniqueId { get_unique_id () } :int =
  | ~
;

parser Ports :(int list) =
  | ~                                         # { [] }
  | OpLparen :~ OpRparen :~                   # { [] }
  | OpLparen :~ Names :(int list) OpRparen :~ # { $2 }
;

parser FinalRules :(edge_t list) =
                                     # { [] }
  | KwFinal :~ Rules :(edge_t list) # { $2 }
;

parser Rules :(edge_t list) =
  | ~                                            # { [] }
  | OpLbrack :~ Rule* :(edge_t list) OpRbrack :~ # { $2 }
;

parser Rule :edge_t =
  | KwRule @str{"rule"} :~ Edge # { $2 }
;

parser ExpList :(exp_t list) =
 | OpLsquare :~ OpRsquare :~             # { [] }
 | OpLsquare :~ Exp ComExp* OpRsquare :~ # { $2::$3 }
;

parser ExpListOpt :(exp_t list) =
 | ~                                     # { [] }
 | OpLsquare :~ OpRsquare :~             # { [] }
 | OpLsquare :~ Exp ComExp* OpRsquare :~ # { $2::$3 }
;

parser ComExp =
  | ',' :~ Exp # { $2 }
;

parser Prop =
  | Name @str{"("^(get_symbol s)} :int '=' :~
    Name @str{(get_symbol s)^")"} :int
    # EqProp
;

parser Exp :exp_t =
  | BoolVal                                      # BoolExp
  | Prop                                         # PropExp
  | '!' @prec:=1 :~ Exp                          # NotExp   // highest precedence
  | 'G' @prec:=2 :~ Exp                          # GExp
  | 'F' @prec:=2 :~ Exp                          # FExp
  | 'X' @prec:=2 :~ Exp                          # XExp
  | Exp "&" @prec:=3 @str{"("^(str_exp_t s0)^
    " & "^(str_exp_t s1)^")"} :~ Exp             # AndExp
  | Exp "|" @prec:=4 @str{"("^(str_exp_t s0)^
    " | "^(str_exp_t s1)^")"} :~ Exp             # OrExp
  | Exp "<->" @prec:=5 @str{"("^(str_exp_t s0)^
    " <-> "^(str_exp_t s1)^")"} :~ Exp           # IffExp
  | Exp "->" @prec:=6 @str{"("^(str_exp_t s0)^
    " -> "^(str_exp_t s1)^")"} :~ Exp            # IfExp
  | Exp 'U' @prec:=7 @str{"("^(str_exp_t s0)^
    " U "^(str_exp_t s1)^")"} :~ Exp             # UExp
  | Exp 'V' @prec:=7 @str{"("^(str_exp_t s0)^
    " V "^(str_exp_t s1)^")"} :~ Exp             # RExp    // lowest precedence
  | OpLparen :~ Exp OpRparen :~                  # ParenExp
;

parser Name :int =
  | Value # { add_symbol (str_value_t $1) }
;

parser Names :(int list) = 
  | Value ComVal* # { List.map (fun x -> add_symbol (str_value_t x)) ($1::$2) }
;
 
parser NamesOpt :(int list)  =
  | ~             # { [] }
  | Value ComVal* # { List.map (fun x -> add_symbol (str_value_t x)) ($1::$2) }
;

parser ComVal =
  | ',' :~ Value # { $2 }
;

parser FloatVal :float =
  | FloatP
  | FloatN
;

parser FloatValP :float =
  | ~      # { 0.0 }
  | IntP   # { float $1 }
  | FloatP # { $1 }
;

parser Value =
  | IntegerVal :int # IntValue
  | XIdent          # IdentValue
;

parser IntegerVal :int =
  | UInt32
  | IntN
;

parser BoolVal =
  | KwTrue @str{"TRUE"} :~   # TrueBoolVal
  | KwFalse @str{"FALSE"} :~ # FalseBoolVal
;

parser UInt32 :int =
  | HexInt
  | IntP 
;

lexer HexInt :int =
  | "0x" [0-9a-fA-F]+
;

lexer IntN :int =
  | '-' [0-9]+
;

lexer IntP :int =
  | [0-9]+
;

lexer FloatP :float =
  | [0-9]+ '.' [0-9]*
;

lexer FloatN :float =
  | '-' [0-9]+ '.' [0-9]*
;

lexer XIdent @map:=true @order:=200 =
  | [a-zA-Z_] [0-9a-zA-Z_]*
;

lexer String {fst (strip_quotes x)} =
  | '"' (('\\' ('\\' | [0-9a-fA-F] [0-9a-fA-F])) | [^\\\"])* '"'
;

// throw away single-line comments
lexer SingleComm :~ =
  | "//" [^\n]*
;

// throw away recursive multiline comments
lexer MultiComm  :~ =
  | "/*" .. "*/"
;

// throw away whitespace
lexer Blanks :~ =
  | [\r\t ]*
;

// throw away newlines (while remembering the position info)
lexer Newlines {do_newline lexbuf} :~ =
  | '\n'
;

lexer OpLbrack = "{" ;
lexer OpRbrack = "}" ;
lexer OpLsquare = "[" ;
lexer OpRsquare = "]" ;
lexer OpLparen = "(" ;
lexer OpRparen = ")" ;

token KwFinal KwTrue KwFalse KwSwitch KwLink
      KwRule KwSpec KwTraffic KwGraph KwNode KwEdge ;

// example AST production
ast TheTest =
  | ~:string ~:char ~:(bool*string) # FooBar
  | ~:(int*(int*int))               # Other
;

property lexer_code = {
  let tokens = ((Hashtbl.create 100) : ((string,token) Hashtbl.t)) ;;

  let add_token str vl =
    try let _ = Hashtbl.find tokens str in
      (parse_error ("token \""^str^"\" already exists"))
    with _ -> Hashtbl.replace tokens str vl
  ;;

  let lookup_keyword str =
     try (let x = Hashtbl.find tokens str in x)
     with _ -> X_IDENT str
  ;;

  add_token "final" KW_FINAL ;;
  add_token "TRUE" KW_TRUE ;;
  add_token "FALSE" KW_FALSE ;;
  add_token "switch" KW_SWITCH ;;
  add_token "link" KW_LINK ;;
  add_token "rule" KW_RULE ;;
  add_token "spec" KW_SPEC ;;
  add_token "traffic" KW_TRAFFIC ;;
  add_token "graph" KW_GRAPH ;;
  add_token "node" KW_NODE ;;
  add_token "edge" KW_EDGE ;;
} ;

property ast_code = {
  (* stub out these functions for now *)
  let str_value_t x = ""
  let str_xident_t x = ""
} ;

property utils_code = {
  module IntSet = Set.Make(
  struct
    type t = int
    let compare = (Pervasives.compare : (int -> int -> int))
  end);;
  let intset_fold = IntSet.fold
  let intset_elements = IntSet.elements
  let intset_subset = IntSet.subset

  let strip_quotes (s : string) : (string*bool) =
    let len = String.length s in
    if ((len >= 2) && (String.get s 0)='"' && (String.get s (len-1))='"')
    then (String.sub s 1 (len-2),true) else (s,false)

  let str_label (s : string) (id : string) : string =
    let result = id in
    let result = if s="" || not false then result
      else result^"_"^(Str.global_substitute (Str.regexp "[^A-Za-z0-9 \t\r\n]")
      (fun s -> Printf.sprintf "#%03d" (Char.code (String.get s 0))) s) in
    (Str.global_replace (Str.regexp "[ \t\r\n]+") "_" result)

  let current_id = ref (-1) ;;
  let symbol_table = ((Hashtbl.create 1000) : (string,int) Hashtbl.t) ;;
  let symbol_table_inv = ((Hashtbl.create 1000) : (int,string) Hashtbl.t) ;;

  let print_symbol_table () =
    Hashtbl.iter (fun k v ->
      print_string ((string_of_int k)^" --> "^v^"\n")
    ) symbol_table_inv

  let force_add_symbol (s : string) (result : int) (complain : bool) : int =
    Hashtbl.replace symbol_table s result;
    Hashtbl.replace symbol_table_inv result s;
    result

  let add_symbol (s : string) : int =
    (try
      int_of_string s
     with _ -> (
     try
      Hashtbl.find symbol_table s
     with _ ->
       let result = !current_id in
       let _ = force_add_symbol s result false in
       current_id := result - 1;
       result
    ))

  let get_symbol (id : int) : string =
    try Hashtbl.find symbol_table_inv id
    with _ ->
      string_of_int id

  let get_unique_id () : int =
    let result = !current_id in
    current_id := result - 1;
    result

  let port_keyword = add_symbol "port" ;;
  let drop_keyword = add_symbol "drop" ;;
  let other_keyword = add_symbol "other" ;;
  let typ_keyword = add_symbol "type" ;;
  let dst_keyword = add_symbol "dst" ;;
  let src_keyword = add_symbol "src" ;;
  let icmp_keyword = add_symbol "icmp" ;;
  let tcp_keyword = add_symbol "tcp" ;;
  let udp_keyword = add_symbol "udp" ;;

  let string_of_id i = ("p"^(if (i < 0) then ("_"^(string_of_int (abs i)))
    else string_of_int i)) ;;

  let str_string_list (sl : string list) : string =
    "{"^(List.fold_left (fun acc s -> acc^", \""^s^"\"") "" sl)^"}"

  let rec str_x_list (f : 'a -> string) (il : 'a list) (comma : string) : string = 
    (fst (List.fold_left
    (fun (str,flag) i ->
      (str^(if flag then "" else comma)^(f i), false)
    ) ("",true) il))

  let rec str_id_list (il : int list) : string = "{"^(str_x_list get_symbol il ", ")^"}"

  let tail_flatten (l : 'a list list) : 'a list =
    let temp = List.fold_left (fun acc l2 ->
      List.rev_append l2 acc
    ) [] l in
    List.rev temp
} ;
