// TODO XXX bug list:
// empty grammar (i.e. no root nonterminal) causes compile error
// "eof"? on RHS of a production doesn't work
// when a (...)* is in a list of item separated by bar, it gives compile warnings
// when (AnnotAtom+ "eof"? | '.') is compiled, there are problems when "eof" exists in input
// for ("token" | "tok") within a production, the strings are not pulled out, so it clashes with another "token"
//   in another production

// This is a comment
/*
  This is a multi-line comment
*/

property util_code = {
   type rule_type = Parser | Lexer | Ast
   let eq_rule_type a b = ((compare a b)=0)
   let str_rule_type s = match s with
   | Parser -> "parser"
   | Lexer -> "lexer"
   | Ast -> "ast"
   let str_to_rule_type p s = match s with
   | "parser" | "parse" -> Parser
   | "lexer" | "lex" -> Lexer
   | "ast" -> Ast
   | _ -> die_error p ("production type '"^s^"' does not exist")

   (* TODO XXX - does this need pos information? *)
   type chars = SingletonChar of char | RangeChar of char * char

   (*let str_chars c = match c with SingletonChar(c) -> "{"^(String.make 1 c)^"}" | RangeChar(c1,c2) -> Printf.sprintf "{%c-%c}" c1 c2*)
   let str_chars c = match c with SingletonChar(c) -> String.make 1 c | RangeChar(c1,c2) -> Printf.sprintf "%c-%c" c1 c2
   let eq_chars a b = ((compare a b)=0)

   let str_x_option f x str = match x with None -> "" | Some(_) -> str^(str_option f x)

   let rec parse_char_list (cl : char list) : (bool * chars list) = (
  let (is_neg, csl, mode, range_start) = List.fold_left (fun (is_neg, csl, mode, range_start) c ->
    match (c,mode,range_start) with
    | ('^',0,_) -> Printf.printf "x:1\n%!"; (true, csl, 1, None)
    | (_,2,Some(rs)) -> Printf.printf "x:2\n%!"; (is_neg, (RangeChar(rs,c))::csl, 1, None)
    | ('-',_,Some(_)) -> Printf.printf "x:3\n%!"; (is_neg, csl, 2, range_start)
    | (_,_,Some(cx)) -> Printf.printf "x:4\n%!"; (is_neg, (SingletonChar(cx))::csl, 1, Some(c))
    | (_,_,_) -> Printf.printf "x:5\n%!"; (is_neg, csl, 1, Some(c))
  ) (false,[],0,None) cl in
  let extra = (match (range_start,mode) with (Some(c),2) -> ['-';c] | (Some(c),_) -> [c] | _ -> []) in
  let csl = List.rev_append (List.rev_map (fun c -> SingletonChar(c)) extra) csl in
  (is_neg, List.rev csl)
)

   type code = EmptyCode of pos_t (**
           Empty code having given
           position *)
         | Code of pos_t * string (**
            Code block having given
            position, 
            OCaml code *)

   let str_code s = match s with EmptyCode(_) -> "{}" | Code(_,c) -> ("{"^c^"}")
   let eq_code a b = ((compare a b)=0)

  let current_id = ref (-1) ;;
  let symbol_table = ((Hashtbl.create 1000) : (string,int) Hashtbl.t) ;;
  let symbol_table_inv = ((Hashtbl.create 1000) : (int,string) Hashtbl.t) ;;

  let print_symbol_table () =
    Hashtbl.iter (fun k v ->
      print_string ((string_of_int k)^" --> "^v^"\n")
    ) symbol_table_inv

  let force_add_symbol (s : string) (result : int) (complain : bool) : int =
    (*if complain && (try let _ = Hashtbl.find symbol_table s in true with _ -> false) then failwith "multiply-defined symbol";*)
    Hashtbl.replace symbol_table s result;
    Hashtbl.replace symbol_table_inv result s;
    result

  let add_symbol (s : string) : int =
    (try
      int_of_string s
     with _ -> (
     try
      Hashtbl.find symbol_table s
     with _ ->
       let result = !current_id in
       (*print_string (">> ADD SYMBOL: "^s^" = "^(string_of_int result)^"\n");*)
       let _ = force_add_symbol s result false in
       current_id := result - 1;
       result
    ))

  let get_symbol (id : int) : string =
    try Hashtbl.find symbol_table_inv id
    with _ ->
      string_of_int id

  let get_unique_id () : int =
    let result = !current_id in
    current_id := result - 1;
    result

  let unit_kw = add_symbol "unit"
  let char_kw = add_symbol "char"
  let int_kw = add_symbol "int"
  let int64_kw = add_symbol "int64"
  let int32_kw = add_symbol "int32"
  let float_kw = add_symbol "float"
  let bool_kw = add_symbol "bool"
  let string_kw = add_symbol "string"
  let option_kw = add_symbol "option"
  let list_kw = add_symbol "list"
  let inline_kw = add_symbol "inline"
  let auto_kw = add_symbol "auto"
  let recur_kw = add_symbol "recur"

   type symb = int
   let str_symb = get_symbol
   let eq_symb a b = ((compare a b)=0)


   let is_string_empty (s : string) : bool =
   (*print_string ("is_empty("^s^")=");*)
   let sp = "[\r\n\t ]+" in
   let t = Str.global_replace (Str.regexp sp) "" s in
   let result = (if t = "" then true else false) in
   (*print_string (if result then "yes" else "no");
   print_string "\n";*)
   result
   ;;

   let rec string_explode (s:string) : char list =
   if (String.length s) > 0 then
      (String.get s 0)::(string_explode (String.sub s 1 ((String.length s)-1)))
   else []
   ;;

   let rec string_combine (cl : char list) : string =
   match cl with
   | [] -> ""
   | c::more -> (String.make 1 c)^(string_combine more)
   ;;

   (* strips (recursive) OCaml comments from a string *)
   let rec strip_ocaml_comments (s : string) : string =
   string_combine (strip_ocaml_comments_helper (string_explode s) [] 0)
   
   and strip_ocaml_comments_helper (cl : char list) (unknown : char list) (level : int) : char list =
   match cl with
   | c1::c2::more ->
      if ((c1 = '(') && (c2 = '*')) then strip_ocaml_comments_helper more (unknown @ [c1;c2]) (level+1)
      else if ((c1 = '*') && (c2 = ')')) then strip_ocaml_comments_helper more (if (level=1) then [] else unknown@[c1;c2]) (level-1)
      else if (level > 0) then strip_ocaml_comments_helper (c2::more) (unknown@[c1]) level
      else c1::(strip_ocaml_comments_helper (c2::more) unknown level)
   | [c] -> c::unknown
   | [] -> unknown
   ;;

   let handle_code ((p,s) : (Lexing.position * string)) : code =
      let p2 = get_pos p in
      (if (is_string_empty (strip_ocaml_comments s)) then EmptyCode(p2) else Code(p2, s))
   ;;
} ;

parser Grammar =
  SemiDecl+
  :(decl_t list)
  @str{(str_list (fun y -> "\n\n"^(str_decl_t y)^"\n;") x)}
;

parser Production : xProduction_t =
  ProdTypeO
  :((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
    @str{let (x,(y,z))=s in let ystr = (match y with Some(y) -> (get_symbol y) | None -> "_") in match x with
        None -> "<"^ystr^(str_pair (str_list (fun x -> " "^(str_opt_t x))) (str_pair (str_option (fun c -> " "^(str_code c))) (str_option (fun t -> " :"^(str_typ_t t)))) z)^"> "
      | Some(x) -> (str_rule_type x)^" "^ystr^(str_pair (str_list (fun x -> " "^(str_opt_t x)))
      (str_pair (str_option (fun c -> " "^(str_code c))) (str_option (fun t -> " :"^(str_typ_t t))))
      z)^" = "}
  BarPattern :(pattern_t list)
    @str{str_list (fun x -> "\n| "^(str_pattern_t x)^"") s} ;

parser BarPattern :(pattern_t list)  = BarPattern0:(pattern_t list) # { List.rev $1 } :(pattern_t list) ;

parser ProdType
:((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
=
  ProdKw:rule_type XIdentO:(symb option) OptList:((xOpt_t list)*((code_t option) * (xTyp_t option))) Eq # { (Some($1),($2,$3)) }
:((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
| '<' XIdentO:(symb option) OptList:((xOpt_t list)*((code_t option) * (xTyp_t option))) '>' Eq? # { (None,($2,$3)) }
:((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
;

parser ProdTypeO
  :((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
  =
~                                                               { (None,(None,([],(None,None)))) }
  :((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
| ProdType:((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option))))) { $1 }
  :((rule_type option)*((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))))
;

parser XIdentO :(symb option) =
~ { None }
| '_'      { None }
| XIdent:symb { Some($1) }
;

parser BarPattern0 =
  Pattern                # { if (match $1 with Pattern(_,([],_)) -> true | _ -> false) then [] else [$1] } :(_ list)
| BarPattern0 '|' Pattern # { if (match $3 with Pattern(_,([],_)) -> true | _ -> false) then $1 else ($3::$1) } :('t3 list)
;

lexer ProdKw { str_to_rule_type (get_current_pos ()) $1 } :rule_type =
  "parse" | "parser" | "lex" | "lexer" | "ast"
;

parser SemiDecl = Decl ';' # { $1 } ;

parser Decl =
  Production : ProdDecl
| TokenKws:()@{"token "} XIdent+:(symb*(symb list)) : TokenDecl
| KeywordKws:()@{"keyword "} XIdent:symb Eq:()@{" = "} StringQuot:string@{Printf.sprintf "%S" s} : KeywordDecl
| "code":()@{"code "} XIdent:symb Eq:()@{" ="}
    NamedCode+:(((symb option)*code_t)*(((symb option)*code_t) list))
    @{let (x,y) = s in str_list (fun (so,c) -> " "^(str_option (fun x -> (get_symbol x)^"") so)^(str_code c)) (x::y)} : CodeDecl
| PropKws:()@{"property "} XIdent:symb Eq:()@{" = "} Value : PropDecl
 ; 

parser NamedCode :(symb option*code_t) =
  XIdent?:(symb option) CodeLit:code_t # { ($1,$2) }
;

parser TokenKws = TokenKw  | "tok"  ;
lexer KeywordKws = "keyword" | "kw" ;
lexer PropKws = "property" | "prop" ;

parser Value =
  Bool:bool         # BoolVal
| Int:int           # IntVal
| StringQuot:string@{Printf.sprintf "%S" s} # StringVal
| CharQuot:char@{Printf.sprintf "%C" s}   # CharVal
| NamedCode:((symb option)*code_t)
    @{let (x,y) = s in " "^(str_option (fun x -> (get_symbol x)^"") x)^(str_code y)} # CodeVal
;

parser Eq = '='@{" = "} ;

parser Pattern =
  //OptList<:((xOpt_t list)*((code option) * (xTyp_t option)))
  //@{str_pair (str_list (fun x -> (str_opt_t x)^" "))
  //(str_pair (str_option (fun c -> (str_code c)^" ")) (str_option (fun t -> ":"^(str_typ_t t)^" ")))
  //s}>
  AnnotAtoms:((annot_atom_t list)*(((symb option) * ((xOpt_t list) * ((code_t option) * (xTyp_t option)))) option))
  @{let (s,s2) = s in Printf.sprintf "%s%s" (str_list (fun x -> (str_annot_atom_t x)^" ") s)
  (str_option (fun (name,(opts,(cd,ty))) ->
  Printf.sprintf "#%s%s%s%s" (str_x_option get_symbol name " ")
  (str_list (fun x -> " "^(str_opt_t x)) opts) (str_x_option str_code cd " ") (str_x_option str_typ_t ty " :")) s2)}
;

parser TempOpt =
~   # { None }
| '#':() XIdentO:(symb option) OptList:((xOpt_t list)*((code_t option) * (xTyp_t option))) # {
  Some($2,$3)
}
;

parser AnnotAtoms =
  AnnotAtom* TempOpt:(((symb option)*((xOpt_t list)*((code_t option) * (xTyp_t option)))) option) # {
    let restructure_annot_atom an = (
      let rec unpack an = (match an with
      | SingletonAnnotAtom(ps,a) -> [(an,ps)]
      | QuantAnnotAtom(ps,an,q) -> (QuantAnnotAtom(ps,SingletonAnnotAtom(ps,EmptyAtom(ps)),q),ps)::(unpack an)
      | OptAnnotAtom(ps,an,(otl,(c,ty))) -> (OptAnnotAtom(ps,SingletonAnnotAtom(ps,EmptyAtom(ps)),(otl,(c,ty))),ps)::(unpack an)
      ) in
      (* NOTE - u is always nonempty *)
      let u = unpack an in
      let ps = snd (List.hd u) in
      let u = (SingletonAnnotAtom(ps,EmptyAtom(ps)),ps)::u in
      let l = List.rev_map fst u in
      let combine opts = fst (combine_opt_list opts) in
      let ((_,_,_,an2),_) = List.fold_left (fun ((opts,c,ty,acc),is_first) an -> 
        let old ps = (match (combine opts, c, ty) with ([],None,None) -> acc | (oc,_,_) -> OptAnnotAtom(ps,acc,(oc,(c,ty)))) in
        (match an with
        | OptAnnotAtom(ps,_,(opts2,(c2,ty2))) -> (match (opts,c,ty,opts2,c2,ty2) with
          | (_,_,_,_,None,None) -> (List.rev_append opts2 opts,c,ty,acc)
          | (_,None,None,_,Some(c2),None) -> (opts,Some(c2),ty,acc)
          | (_,_,_,_,Some(c2),None) -> ([],Some(c2),None,old ps)
          | (_,_,_,_,_,Some(ty2)) -> ([],None,None,OptAnnotAtom(ps,acc,(combine opts,(c,Some(ty2)))))
        )
        | SingletonAnnotAtom(ps,a) ->
          if is_first || ((opts,c,ty)=([],None,None)) then (opts,c,ty,acc)
          else ([],None,None,old ps)
        | QuantAnnotAtom(ps,_,q) -> ([],None,None,QuantAnnotAtom(ps,old ps,q))),false
      ) (([],None,None,List.hd l),true) (List.tl l) in
      an2
    ) in
    let result = List.rev (List.rev_map restructure_annot_atom $1) in
    (result,$2)
    (*match $2 with
    | None -> result
    | Some((name,(opts,(cd,ty))) as x) ->
      let ps = get_current_pos () in
      [SingletonAnnotAtom(ps,ProdAtom(ps,Production(ps,(None,(name,((ValOption(ps,Some(inline_kw),BoolVal(ps,true)))::opts,(cd,ty)))),[Pattern(ps,result)])))]*)
  }
;

parser AnnotAtom =
  Atom            # SingletonAnnotAtom
| AnnotAtom Quant # QuantAnnotAtom
| AnnotAtom Opt2:((xOpt_t list)*((code_t option)*(xTyp_t option)))@{str_pair (fun l -> str_list (fun x -> " "^(str_opt_t x)) l) (str_pair (str_option (fun x -> " "^(str_code x))) (str_option (fun x -> " :"^(str_typ_t x)))) s}  # OptAnnotAtom
;

parser OptList :(xOpt_t list*(code_t option*xTyp_t option)) = Opt*:(xOpt_t list) OptType:(xTyp_t option) # {
  let (ol2,c) = combine_opt_list $1 in
  (ol2,(c,$2))
}
;

parser Opt2 =
  ':':() Typ0:xTyp_t                            # { ([],(None,Some($2))) }
| Opt                                     # {
  match $1 with
  | CodeOption(ps,None,c) -> ([],(Some(c),None))
  | ValOption(ps,None,CodeVal(ps2,(name,c))) -> ([],(Some(c),None))
  | o -> ([o],(None,None))
}
;

parser OptType :(xTyp_t option) =
  ~                                          # { None }
| ':':() Typ0:xTyp_t                            # { Some($2) }
;

parser Opt =
//| Int<:int>                               # PrecOption
//| Assoc                                   # AssocOption
 FnName:(symb option)@{"@"^(str_option str_symb s)} ":=":()@{":="} Value # ValOption
|FnName:(symb option)@{"@"^(str_option str_symb s)} CodeLit:code_t # CodeOption
| '@':()@{"@"} '$':()@{"$"} XIdent:symb      # CodeNameOption
;

parser FnName :(symb option) =
~                                   # { None }
| '@':()@{"@"} XIdent?:(symb option) # { $2 }
;

lexer TokenKw = "token" ;

parser Typ0 : xTyp_t = Typ # { norm_typ $1 };

parser Typ : xTyp_t =
  SimpleType          # SimpleType
| '(':() CompoundType ')':() # CompoundType
;

parser SimpleType =
  TokenKw:() # TokenType // TODO XXX - maybe there's a need to set the name of this type?
| '_':()      # AnyType
| '~':()      # NoType
| '\'':()@{"'"} XIdent:symb # VarType
| '(':() ')':()  # UnitType
| TypeName:(symb list)@{""^(str_x_list get_symbol s ".")^""} # IdentType
;

parser CompoundType =
  CompoundType1:((constr_type_t list) list)@{""^(str_x_list (fun x -> str_x_list str_constr_type_t x "*") s ",")^""} # CommaType
| AbstrName "of":()@{""} TupleType:(constr_type_t list)@{(if (List.length s)>0 then " of " else "")^(str_x_list str_constr_type_t s "*")}   # AbstrType
;

parser AbstrName =
  XIdent:symb # IdentName
| '_':~        # AnyName
;

parser CompoundType1 = CompoundType0 # { List.rev $1 } :((constr_type_t list) list) ;
parser CompoundType0 =
  TupleType:(constr_type_t list)                        # { [$1] } :((constr_type_t list) list)
| CompoundType0 ',':() TupleType:(constr_type_t list) # { $3::$1 } :((constr_type_t list) list)
;

parser TupleType :(constr_type_t list) = TupleType0:(constr_type_t list) # { List.rev $1 } :(constr_type_t list) ;
parser TupleType0 :(constr_type_t list) =
  ConstrType                     # { [$1] } :(constr_type_t list)
| TupleType0 '*':() ConstrType # { $3::$1 } :(constr_type_t list)
;

parser ConstrType =
  Typ0:xTyp_t                                                                      # SingletonConstrType
| ConstrType TypeName:(symb list)@{" "^(str_x_list get_symbol s ".")^""} # InstConstrType
;

parser TypeName :(symb list) = TypeName0 # { List.rev $1 } :(symb list) ;
parser TypeName0 :(symb list) =
  XIdent:symb               # { [$1] }
| TypeName0 '.' XIdent:symb # { $3::$1 } ;

parser Quant =
  '*':~ # StarQuant
| '+':~ # PlusQuant
| '?':~ # QuestionQuant
;

parser Quot :string =
  CharQuot:char   # { String.make 1 $1 }
| StringQuot:string # { $1 }
;

parser Atom =
  '~':()                         # EmptyAtom
| "eof":()                       # EofAtom
| StringQuot:string@{Printf.sprintf "%S" s}              # StringAtom { let p = get_current_pos () in if String.length $1 > 0 then StringAtom(p, $1) else EmptyAtom(p) }
| XIdent:symb                  # IdentAtom
| Charset CharsetDiffOption:(charset_t option)
    @{str_option (fun x -> " / "^(str_charset_t x)) s}                         # CharsetAtom
| Quot:string@{Printf.sprintf "%S" s} "..":()@{" .. "} Quot:string@{Printf.sprintf "%S" s} : RecurAtom
| '(':() Production ')':()     # ProdAtom
;

parser CharsetDiffOption :(charset_t option) =
     ~         # { None }
| '/' Charset # { Some($2) }
;

// TODO XXX
parser Charset = "" ;
parser Charsetz =
  '_':()               # WildcardCharset
| CharQuot:char@{Printf.sprintf "%C" s} # SingletonCharset
| Chars0:(bool*(chars list))
  @{let (is_neg,cl)=s in Printf.sprintf "[%s%s]" (if is_neg then "^" else "") (str_list str_chars cl)}    # ListCharset
;

parser Chars0 :(bool*(chars list)) = Chars:string # {
  let ib = Scanf.Scanning.from_string ("\""^(String.sub $1 1 ((String.length $1)-2))^"\"") in
  let cl = string_explode (Scanf.bscanf ib "%S" (fun x -> x)) in
  parse_char_list cl
} ;

lexer Bool {bool_of_string x} :bool = "true" | "false" ;
lexer XIdent {add_symbol x} :symb = [a-zA-Z] [a-zA-Z0-9_]* ; // TODO XXX - make sure this works with the ident translator
//TODO XXX//lexer Chars = ('[' ([^\\\]]* ('\\' _)*)* ']')<:string> : { $1 } ;
lexer Chars = "" ;
lexer StringQuot { Scanf.sscanf $1 "%S" (fun x -> x) } = '"' (([^\\\"]* ('\\' _)*)*) '"' ;
lexer CharQuot { (Scanf.sscanf $1 "%C" (fun x -> x)) } = '\'' (([^\\\'] |
         ('\\' ('\\'|'"'|'\''|'n'|'r'|'t'|'b')) |
         ('\\' [0-9] [0-9] [0-9]) )) '\'' ;
lexer Int {int_of_string x} :int = [0-9]+ ;
//TODO XXX//lexer CodeLit = "{" .. "}"<:(Lexing.position*string){let p = Lexing.lexeme_start_p lexbuf in (p,s)}> : { handle_code $1 } ;
lexer CodeLit { handle_code () } :code_t = "" ;

lexer SingleComm {} = "//" [^\n]* ;  /* throw away single-line comments */
lexer MultiComm {} = "/*" .. "*/" ;
/* ^^ throw away recursive multiline comments */
// TODO XXX - check that these are all thrown away properly

lexer Blanks {} = [\r\t ]* ;
lexer Newlines {do_newline lexbuf} = '\n' ;


