/*property default_production_type = "parser" ;

lexer Outer = ("one" | "two" | ("three" | "four")) | "end" ;
lexer Three : string @$foo = "one" | ("three" | '1' | "four");

parser FooBar @$foo = "one" | (parser MyParser = "three" | ("four")) | "two" (parser Other = "one")+ :int*:string | ("baz") ;

code foo = str{foo} {int_of_string s} eq{=} ;
property parser_code = {one} str{(*this is a test*)} ;

parser Lang :int =
| GetInt '+' GetInt { $1 + $3 }
| GetInt '-' GetInt { $1 - $3 }
;

parser GetInt :int =
| "one" { 1 }
| "two" { 2 }
;

parser Four :int =
| |
| eof { 1 }
| one two eof {12 }
| :int {two} :string :one one {test} :int one
| (<Two:int> two)
| (<Two1:int> = two)
| (parser Two2:int = two)
;

lex one = "one" ;
lex two = "two" ;

keyword Foo = "test" ;*/

//parser TheTest = "one":string @$foo "two"* "three"? "four":int+* {one} {two} @{code} (parser = "test" | ("two" | "three")):foo;
//parser {code} = {code} "foobar" .. '\063' "":int ~:~ | {code2} Brackets;
//parser Brackets = [^^-^a-zA-Z0-9^-s] ;

//code foo = {test} str{code} ;


//lexer Outer = ("one" | "two" | ("three" | "four")) | "end" | 'a' | [1-2a-z];
//lexer Small = "one" ;
//lexer Small2 = "o" ;
//lexer Small3 = 'o' ;

//lexer Small =  ;
//ast TheTests = 'x' '\r' "one\n"* (parser Foo @$foo = "two" | ("three" | "four" @str{test}))+*{do}:(something list)?*+{x}+{one}:int?:int;
//parser TheTest :int = "one" :string {} @$foo : int :string @eq{} @str{} {} :final  ; // TODO XXX - this is a bug
//parser TheTest {one} {two} @eq{the1} {three} @str{s1} @eq{the2} :string = "one" : string {this is code} @eq{one} @eq{two} :foobar ;
//code foo = str{test};
//parser Four @{one} @{two} @:={3} = "one" | "two" @eq:={four} @eq:={five} @str{three} @str:={four} @:={xxx} @{yyy} ;
//parser Four {other} = "one" @test:=123 @test2:=1234 @assoc:="left" {code} "other" | "two"*+? "other" 'c' :int :bool ;
//parser Temp = ||| "one" "two" | "three" | "four" "five" "six" ;
/*parser Temp =
| "one" "two" "three" # {code} : int
| "one" "two" "three" # _ {code} : int
| "five" "six" # SomethingTemp {(string_to_int $1) + (string_to_int $2)} :int 
| "five" {string_to_int $1} :int "six" {string_to_int $1} :int # IntTemp {$1 + $2} :int 
| "five" "six" # BoolTemp @option:=123 :bool 
| "five" "six" # OtherTemp @option:=123 @option:=124 {code1} {code2} @option:=125 :bool 
;*/
//parser Final = "one" : (Foo of _) ;
//parser Three = (parser Four @inline:=true = "one" # Six | (parser Seven @inline:=true = "two")) | (parser Five @inline:=true = "foo") ;
//parser Other = "one" (parser @one:=123 @two:=124 = "four" | "five") "three" ;
//parser Test = "one" :(((int*((int)))*(int*(bool)*(((string)))))) ;
//lexer Five = "o" | "t"  ;
//parser TheTest3 = || "one" | "two" ||| "three" | | | | ~ ;

property parameter_name = "x" ;
property type_name = "t" ;
parser Test1 = "one" {do_something x} * "two" ;
parser Test2 :(_ list) = ~ # {[]} :(_ list) | "one" Test2 # {$1::$2} :('t1 list) ;
parser Test3 = ~ | Test3 "one" ;
parser Foo = "x" {cd} * + "y";
parser Last =
| "one" {cd} :type1 
| "two" {code}
| "three" @recur:="left" {string_of_int x} ? # {code} ;
//parser Test1 = "one" {code} "two" ;
//parser Test = "one" @recur:="left" {let x = $1 in something x} @x{foo} + "other" ;
