// TODO XXX bug list:
// empty grammar (i.e. no root nonterminal) causes compile error
// "eof"? on RHS of a production doesn't work
// when a (...)* is in a list of item separated by bar, it gives compile warnings

// This is a comment
/*
  This is a multi-line comment
*/

{
   let add_ints a b = a + b;;
   let test_cmp a b = match (a,b) with
     | (x,y) -> x = y
   ;;
}

Grammar -> CodeBlock Production+ CodeBlock ;
CodeBlock -> 
| Code
;

Code -> "{" .. "}" ;

Production -> XIdent "->" Pattern ('|' Pattern)* ';' ;

Pattern -> SubPattern* EofOp Label CodeBlock ;
EofOp ->
| "eof" ;
Label -> 
| Colon XIdent? PatternOpt* ;

Colon -> ':' ;
PatternOpt -> Int | Assoc ;

Assoc -> "left" | "right" | "unary" ;

SubPattern ->
  "token"
| Atom Opts
| Quot ".." Quot Opts
;

Opts -> 
  OpOpr OptList?
;

OptList -> '<' Opt* '>' ; // TODO XXX
Opt ->
  Int
| Assoc
| Code
| ':' Typ
| '@' Code
| '=' Code
;

Typ ->
  "token"
| '(' ')'
| TypeName
| '(' Typ TypeName ')'
| '(' Typ StarTypList ')'
| '(' Typ CommaTypList ')'
| '(' Typ ')'
;

TypeName -> 
ZTypeIdent ('.' ZTypeIdent)*
;

StarTypList -> ('*' Typ)+ ;
CommaTypList -> (',' Typ)+ ;

OpOpr ->
| '*' | '+' | '?' ;

Quot ->
  CharQuot
| StringQuot ;

Atom ->
  XIdent
| StringQuot
| Charsets
| Subs
;

Charsets -> Charset ('/' Charset)? ;
Subs -> '(' SubPatterns ('|' SubPatterns)* ')' ;
SubPatterns -> SubPattern+ ;

Charset ->
  '_'
| CharQuot
| Chars ;

ZTypeIdent -> ([a-zA-Z] [a-zA-Z0-9_]*) ; // TODO XXX - this clashes with XIdent
XIdent -> ([A-Z] [0-9a-zA-Z]*) ;
Chars -> ('[' ([^\\\]]* ('\\' _)*)* ']') ; // TODO XXX
StringQuot -> ('"' (([^\\\"]* ('\\' _)*)*) '"') ;
CharQuot -> ('\'' (([^\\\'] |
         ('\\' ('\\'|'"'|'\''|'n'|'r'|'t'|'b')) |
         ('\\' [0-9] [0-9] [0-9]) )) '\'') ;
Int -> ([0-9]+) ;

SingleComm -> ("//" [^\n]*) <{}:()> : {};  /* throw away single-line comments */
MultiComm  -> "/*" .. "*/" <{}:()> : {};
/* ^^ throw away recursive multiline comments */

Blanks -> [\r\t ]* <{}:()> : {};
Newlines -> '\n' <{do_newline lexbuf}:()> : {};



{
   (* this is the trailer *)
}
